"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addToCollection = exports.addToDocument = exports.getDocument = exports.queryInCollection = exports.QueryOperators = void 0;
const firebase_1 = require("../../config/firebase");
const chalk_1 = require("../../config/chalk");
var QueryOperators;
(function (QueryOperators) {
    QueryOperators["LessThan"] = "<";
    QueryOperators["LessThanOrEqual"] = "<=";
    QueryOperators["Equal"] = "==";
    QueryOperators["GreaterThanOrEqual"] = ">=";
    QueryOperators["GreaterThan"] = ">";
    QueryOperators["ArrayContains"] = "array-contains";
    QueryOperators["In"] = "in";
    QueryOperators["ArrayContainsAny"] = "array-contains-any";
})(QueryOperators || (QueryOperators = {}));
exports.QueryOperators = QueryOperators;
/** Queries
 * @param {string} collection: Firestore collection to perform query in
 * @param {string} field: Field to search for
 * @param {QueryOperators} queryOperator: Operator to query search
 * @param {string} value: Value to apply queryOperator
 * @return {Promise<FirebaseFirestore.QuerySnapshot<
 *  FirebaseFirestore.DocumentData>>} snapshot: Contains all
 *  documents that match query search
 */
async function queryInCollection(collection, field, queryOperator, value) {
    const colRef = firebase_1.db.collection(collection);
    const snapshot = await colRef.where(field, queryOperator, value).get();
    return snapshot;
}
exports.queryInCollection = queryInCollection;
/** Fetches data from a specified Firestore Document
 * @param {string} collection: Firestore collection name document is in
 * @param {string} document: Firestore document name
 * @param {object} data: Data in dcoument
 */
async function getDocument(collection, document) {
    try {
        const docRef = firebase_1.db.collection(collection).doc(document);
        const doc = await docRef.get();
        if (!doc.exists) {
            throw Error(`Document with ${document} ID` +
                `does not exist in ${collection}`);
        }
        return doc.data();
    }
    catch (err) {
        chalk_1.logger.errorLog({ tag: 'getDocument', log: err });
        throw Error('Document does not exist');
    }
}
exports.getDocument = getDocument;
/** Adds data into a Firestore Document. Creates the document if
 * it doesn't exist already
 * @param {string} collection: Firestore collection name
 * @param {string} document: Firestore document name
 * @param {object} data: Data to insert
 */
async function addToDocument(collection, document, data) {
    const res = await firebase_1.db
        .collection(collection)
        .doc(document)
        .set(data, { merge: true });
    chalk_1.logger.printLog({ tag: `Updated `, log: data });
}
exports.addToDocument = addToDocument;
/** Adds data into an autogenerated Firestore Document in a
 * specified Firestore Collection
 * @param {string} collection: Firestore collection name
 * @param {object} data: Data to insert
 * @return {Promise<string>} docRef.id: The auto-generated Firestore Document Id
 */
async function addToCollection(collection, data) {
    console.log('Trying to add', data);
    try {
        const docRef = await firebase_1.db
            .collection(collection)
            .add(data);
        console.log('Added document with ID: ', docRef.id);
        return docRef.id;
    }
    catch (err) {
        chalk_1.logger.errorLog({ tag: 'addToCollection', log: err });
        throw Error('Could not add document to collection');
    }
}
exports.addToCollection = addToCollection;
//# sourceMappingURL=dao.js.map