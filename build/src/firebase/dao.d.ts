declare enum QueryOperators {
    LessThan = "<",
    LessThanOrEqual = "<=",
    Equal = "==",
    GreaterThanOrEqual = ">=",
    GreaterThan = ">",
    ArrayContains = "array-contains",
    In = "in",
    ArrayContainsAny = "array-contains-any"
}
/** Queries
 * @param {string} collection: Firestore collection to perform query in
 * @param {string} field: Field to search for
 * @param {QueryOperators} queryOperator: Operator to query search
 * @param {string} value: Value to apply queryOperator
 * @return {Promise<FirebaseFirestore.QuerySnapshot<
 *  FirebaseFirestore.DocumentData>>} snapshot: Contains all
 *  documents that match query search
 */
declare function queryInCollection(collection: string, field: string, queryOperator: QueryOperators, value: string): Promise<FirebaseFirestore.QuerySnapshot<FirebaseFirestore.DocumentData>>;
/** Fetches data from a specified Firestore Document
 * @param {string} collection: Firestore collection name document is in
 * @param {string} document: Firestore document name
 * @param {object} data: Data in dcoument
 */
declare function getDocument(collection: string, document: string): Promise<FirebaseFirestore.DocumentData | undefined>;
/** Adds data into a Firestore Document. Creates the document if
 * it doesn't exist already
 * @param {string} collection: Firestore collection name
 * @param {string} document: Firestore document name
 * @param {object} data: Data to insert
 */
declare function addToDocument(collection: string, document: string, data: object): Promise<void>;
/** Adds data into an autogenerated Firestore Document in a
 * specified Firestore Collection
 * @param {string} collection: Firestore collection name
 * @param {object} data: Data to insert
 * @return {Promise<string>} docRef.id: The auto-generated Firestore Document Id
 */
declare function addToCollection(collection: string, data: object): Promise<string>;
export { QueryOperators, queryInCollection, getDocument, addToDocument, addToCollection, };
